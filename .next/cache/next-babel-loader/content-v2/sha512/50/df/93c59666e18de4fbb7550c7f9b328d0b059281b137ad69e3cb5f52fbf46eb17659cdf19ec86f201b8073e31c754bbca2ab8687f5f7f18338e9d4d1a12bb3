{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gimseungheon/Documents/NextProject/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\nimport { mongoConnectionUrl } from \"../api/new-meetup\";\n\nconst MeetupDetailPage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Oesterlars_Kirke_Bornholm_Denmark.jpg/500px-Oesterlars_Kirke_Bornholm_Denmark.jpg',\n    title: 'A first meetup',\n    address: 'address 333, 33333 city',\n    description: 'first thing'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}; //getStaticPath : 당연히 데이터도 미리 만들어 놓기 때문에 경로 url 들도 미리 만들어 놓아야 한다\n\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(mongoConnectionUrl);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  await client.close();\n  return {\n    fallback: false,\n    //밑에 해당하는 path 들만 미리 생성해놓도록 설정 (true 일경우)\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}; //static site generation(SSG)\n\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(mongoConnectionUrl);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  await client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n};\nexport default MeetupDetailPage;","map":{"version":3,"sources":["/Users/gimseungheon/Documents/NextProject/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","mongoConnectionUrl","MeetupDetailPage","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAAQC,WAAR,QAA0B,SAA1B;AACA,SAAQC,kBAAR,QAAiC,mBAAjC;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAChC,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAE,6IADX;AAEI,IAAA,KAAK,EAAE,gBAFX;AAGI,IAAA,OAAO,EAAE,yBAHb;AAII,IAAA,WAAW,EAAE;AAJjB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD,C,CAWA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACtC,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoBL,kBAApB,CAArB;AACA,QAAMM,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAAtB;AAEA,QAAMR,MAAM,CAACS,KAAP,EAAN;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AACa;AAChBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAX;AAAT,KAAL,CAAlB;AAFJ,GAAP;AAIH,CAdM,C,CAgBP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC7C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoBL,kBAApB,CAArB;AACA,QAAMM,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAEQ;AAAN,GAA1B,CAA7B;AAEA,QAAMf,MAAM,CAACS,KAAP,EAAN;AAEA,SAAO;AACHX,IAAAA,KAAK,EAAE;AACHuB,MAAAA,UAAU,EAAEF;AADT;AADJ,GAAP;AAKH,CAjBM;AAmBP,eAAetB,gBAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport {MongoClient} from \"mongodb\";\nimport {mongoConnectionUrl} from \"../api/new-meetup\";\n\nconst MeetupDetailPage = (props) => {\n    return (\n        <MeetupDetail\n            image={'https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Oesterlars_Kirke_Bornholm_Denmark.jpg/500px-Oesterlars_Kirke_Bornholm_Denmark.jpg'}\n            title={'A first meetup'}\n            address={'address 333, 33333 city'}\n            description={'first thing'}\n        />\n    )\n};\n\n//getStaticPath : 당연히 데이터도 미리 만들어 놓기 때문에 경로 url 들도 미리 만들어 놓아야 한다\nexport const getStaticPaths = async () => {\n    const client = await MongoClient.connect(mongoConnectionUrl);\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetups = await meetupsCollection.find({}, {_id: 1}).toArray();\n\n    await client.close();\n\n    return {\n        fallback: false,//밑에 해당하는 path 들만 미리 생성해놓도록 설정 (true 일경우)\n        paths: meetups.map(meetup => ({params: {meetupId: meetup._id.toString()}}))\n    }\n};\n\n//static site generation(SSG)\nexport const getStaticProps = async (context) => {\n    const meetupId = context.params.meetupId;\n\n    const client = await MongoClient.connect(mongoConnectionUrl);\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const selectedMeetup = await meetupsCollection.findOne({_id: meetupId});\n\n    await client.close();\n\n    return {\n        props: {\n            meetupData: selectedMeetup\n        }\n    }\n}\n\nexport default MeetupDetailPage;"]},"metadata":{},"sourceType":"module"}